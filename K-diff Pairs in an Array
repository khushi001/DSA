class Solution {
    public int findPairs(int[] nums, int k) {
        if (k < 0) {
            return 0; // k-diff pairs can't have negative difference
        }

        Map<Integer, Integer> frequencyMap = new HashMap<>();
        int count = 0;

        // Count the frequency of each number
        for (int num : nums) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }

        // Iterate through the frequency map
        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {
            int num = entry.getKey();
            int freq = entry.getValue();

            if (k == 0) {
                // For k = 0, count how many numbers appear more than once
                if (freq >= 2) {
                    count++;
                }
            } else {
                // For k > 0, check if (num + k) is also in the map
                if (frequencyMap.containsKey(num + k)) {
                    count++;
                }
            }
        }

        return count;
    }
}
